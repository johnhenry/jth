'hello world' @@;
1 2 3 4 5 6 ((...stack)=>stack.map(x=>x**x)) ((...stack)=>stack.map(x=>x+1)) @@ ::: x;
1 2 3 4 5 6 6 fiveNumberSummary @@;
Math.random() @@;
1 2 3 4 5 6 hold(limitN(3)(trunc(randomize))) ::: r;
r ... <- @@;
1 2 3 limitN(2)(+) @@;
1 2 3 dupe @@;
hold(dupe) hold(*) compose ::: [squareLast];
2 3 squareLast @@;

2 3 dupe * @@;
2 3 dupe limitN(2)(Σ) @@;
//;
hold(dupe) hold(+) compose ::: [double];
hold(double) hold(squareLast) compose ::: [doublesquare];
4 3 doublesquare @@;
"" @@;
1 2 3 dupe @@ ::: dave;
3 squareLast @@ ::: [fiona];
"" @@;
1 2 3 ::: start;
7 8 9 ::: end;
start ... 4 5 6 end ... @@;
"" @@;
1 2 3 4 5 ::: list;
list @@;
list ... @@ trunc(count) ::: [l];
"L:" l @@;
list ... Σ :::[s];
list ... Π :::[p];
list ... mean :::[m];
"sum" s "product" p "mean" m @@;
"sum" list ... limitN(l)(+)
  "product" list ... limitN(l)(*)
  "mean" list ... limitN(l)(mean)
  @@;


1 2 3 ::: [a,b,c];

c b a @@;

3 4 5 6 7 4 false keepIf @@;

0 0 0 6 7 0 false or 12 3 @@;

3 4 5 6 7 4 map(x=>x>5) @@;

0 1 2 3 4 5 8 to @@;
0 1 2 3 4 5 8 fromTo @@;
0 1 2 3 4 5 8 toInc @@;
0 1 2 3 4 5 8 fromToInc @@;

5 -5 to @@;
5 -5 fromTo @@;
5 -5 toInc @@;
5 -5 fromToInc @@;

1 2 3 4 5 populationVariance @@;

1 2 3 4 5 hold(sampleVariance) hold(populationVariance) true keepIfElse <- @@:::[variance];

1 2 3 4 5 sampleVariance @@;

1 2 3 4 5 hold(sampleVariance) hold(populationVariance) false keepIfElse <- @@:::[variance];

3 4 5 map((x)=>x**4) @@ ::: carol;
"" @@;
4 [1 2 3 *()] ! ::: arr;
arr ... @@;
arr ... ... @@;
arr ... ... <- @@;
arr ... ! @@;
arr ... ! ... @@;
arr ... ! @@ ::: [...sub];

sub[1] ... @@;
[1 2 3 Π ] !:::[s];
s @@;
1 [2 3 4 5 6 Π] ! ... Σ @@;
1 [2 3 4 5 6 Π] ! ... Σ @@;

[2 3 Π] ! @@;
"---" @@;
5 [2 2 Π] ... <- 3 @@ ::: [twenty three];
5 [2 2 *] ... <- 3 @@ ::: [five four three];
// // (*){ * *0 1 fromToInc !{2} Π};

1 2 3 reduce((a,b)=>a+b, 0) @@;
4 5 @@ :::[...rest];
rest ... @@ :::[...rest];
